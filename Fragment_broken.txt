#version 330 core

struct Material {
	sampler2D texture_diffuse1;
	sampler2D texture_specular1;
	sampler2D texture_normal1;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

layout(location = 0)out vec4 FragColor;

in vec3 Position;
in vec3 Normal;
in vec3 Color;
in vec2 TexCoord;

//uniform Light light;
//uniform Material material;
//uniform vec3 cameraPos;
//uniform samplerCube skybox;
//uniform sampler2D ourTexture;
//uniform vec3 lightPos;
//uniform vec3 lightColor;
uniform sampler2D texture_diffuse1;
uniform	sampler2D texture_specular1;
uniform	sampler2D texture_normal1;

void main(){
	
	vec3 normal = texture(texture_normal1, TexCoord).rgb;
	normal = normalize(normal * 2.0 - 1.0);

	// ambient
	//vec3 ambient = light.ambient * material.ambient;

	// diffuse
	//vec3 norm = normalize(Normal);
	//vec3 lightDir = normalize(light.position - Position);
	//float diff = max(dot(norm, lightDir), 0.0);
	//vec3 diffuse = light.diffuse * (diff * material.diffuse);

	// specular
	//vec3 viewDir = normalize(cameraPos - Position);
	//vec3 reflectDir = reflect(-lightDir, norm);
	//float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	//vec3 specular = light.specular * (spec * material.specular);

	
	//vec3 result = ambient + diffuse + specular;
	FragColor = texture(texture_diffuse1, TexCoord);// * vec4(result, 1.0);
	//  vec4(texture(skybox, R).rgb, 1.0) * 
}