#version 330 core

struct Material {
	sampler2D texture_diffuse1;
	sampler2D texture_specular1;

	vec3 texture_normal1;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

struct Light {
	vec3 position;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

layout(location = 0)out vec4 FragColor;

in vec3 Position;
in vec3 Normal;
in vec3 Color;
in vec2 TexCoord;

uniform Light light;
uniform Material material;
uniform vec3 cameraPos;
uniform samplerCube skybox;
uniform sampler2D ourTexture;
uniform vec3 lightPos;
uniform vec3 lightColor;

void main(){
	// ambient
	vec3 ambient = light.ambient * material.ambient;

	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(light.position - Position);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = light.diffuse * (diff * material.diffuse);

	// specular
	vec3 viewDir = normalize(cameraPos - Position);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	vec3 specular = light.specular * (spec * material.specular);

	vec3 I = normalize(Position - cameraPos);
	vec3 R = reflect(I, normalize(material.texture_normal1)) * (material.shininess / 2.0); 
	vec3 result = R;
	//FragColor = vec4(result, 1.0);
	FragColor = texture(material.texture_diffuse1, TexCoord);
}